{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/naver-tech-concert-review-4","result":{"data":{"markdownRemark":{"html":"<p>2019년 4월 11일, 네이버 프론트엔드 테크콘서트에서 진행되었던 <a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-fe\">오늘부터 나도 FE 성능분석가</a> 세미나를 듣고 내용을 정리한 글입니다.</p>\n<h2>WEB 성능분석 지표</h2>\n<h3>TPS(Transition Per Second)</h3>\n<p>서버가 얼마나 많은 요청을 처리할 수 있는지를 나타내는 지표</p>\n<h3>LAI(Loading And Interaction)</h3>\n<p>사용자 입력에 얼마나 빠르게 반응하는지를 나타내는 지표</p>\n<ul>\n<li><strong>초기 로딩 속도</strong> : 얼마나 빨리 페이지를 볼 수 있는지</li>\n<li><strong>인터렉션 속도</strong> : 동작이나 애니메이션의 매끄러운 정도</li>\n</ul>\n<h2>FE 성능개선 작업 PLAN</h2>\n<h3>대상 선정하기 : 숲을 보자</h3>\n<ul>\n<li>서비스에서 가장 많이 사용하는 화면은 무엇인가</li>\n<li>서비스에서 사용자에게 가치 있는 화면은 무엇인가</li>\n</ul>\n<h3>개선 프로세스</h3>\n<ul>\n<li>측정(Measure)</li>\n<li>분석(Analytic)</li>\n<li>최적화(Optimize)</li>\n</ul>\n<h3>언제까지?</h3>\n<p>목표에 도달할 때까지</p>\n<ul>\n<li><strong>목표</strong> : 초기 로딩 속도</li>\n<li><strong>네이버의 초기 로딩 속도</strong> : 모바일 1.5초, PC 2초</li>\n<li><strong>구글의 초기 로딩 속도</strong> : 사용자에게 꼭 보여주어야 하는 부분 기준 FMP</li>\n</ul>\n<h2>성능 개선 작업 - Part 1 : 초기 로딩 속도 개선하기</h2>\n<h3>페이지 로딩 과정</h3>\n<p>서버로부터 HTML 파일을 받고, 파일에 첨부된 script, link, img 태그 등을 요청해서 받아옴</p>\n<h3>로딩 속도 측정/분석하기</h3>\n<p>waterfall 차트의 <strong>높이</strong>를 줄이고, <strong>폭</strong>을 줄이고, <strong>간격</strong>을 당긴 후 총 점검하기</p>\n<h4><strong>높이 줄이기</strong> : Request 수 줄이기</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42922453/56368481-7a39b580-6232-11e9-8e83-2c439b340d50.png\" alt=\"image\"></p>\n<ul>\n<li>JS, CSS Merge : JS, CSS를 합쳐서 하나의 파일로 만듦</li>\n<li>CSS Sprite : 여러 이미지를 하나의 Sprite 이미지로 만듦</li>\n<li>DATA URI : 캐싱되지 않아도 될 이미지를 HTML 요청에 포함</li>\n<li>Lazy : 초기 로딩 시 불필요한 자원은 삭제하거나, 나중에 요청\n_ 실수로 요청한 자원\n_ 초기 로딩 시 불필요한 JS : <code class=\"language-text\">&lt;script&gt;</code> 태그 동적 삽입 * 뷰 포트 바깥에 있는 이미지 : carousel 같은 경우</li>\n</ul>\n<blockquote>\n<p>이미지가 전체 요청 용량의 절반 이상을 차지하므로 이 부분을 개선하는 것이 가장 효과적</p>\n</blockquote>\n<p>브라우저는 호스트당 <strong>동시 연결 가능한 개수</strong>가 정해져 있음</p>\n<ul>\n<li>요청 수가 많은 경우 : 가능한 connection 수를 초과해서 대기 발생</li>\n<li>요청을 줄일수록 좋음</li>\n</ul>\n<h4><strong>폭 줄이기</strong> : Request 시간 줄이기</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42922453/56368550-a0f7ec00-6232-11e9-9d8f-e9734ec6cef7.png\" alt=\"image\"></p>\n<ul>\n<li>HTTP 프로토콜마다 Connection 활용 방법이 다름</li>\n<li>HTTP2를 사용하자</li>\n<li><strong>TTFB(Time to First Byte)</strong> : 오래 걸리면 서버 비즈니스 로직이 느린 것</li>\n<li>\n<p><strong>Content Download</strong>가 오래 걸릴 때 : 네트워크 속도가 낮거나 컨텐츠 크기가 큰 경우\nd ㅋㅌ* minify(주석제거, 공백제거), obfuscation(변수명 변경), gzip(컨텐츠 인코딩)</p>\n<ul>\n<li>큰 이미지 줄이기, 이미지 메타정보 날리기</li>\n</ul>\n</li>\n</ul>\n<p>이미지가 클수록 Decode(이미지 데이터를 RGB로 변환하는 과정) 비용이 많이 듬</p>\n<ul>\n<li>디자이너는 레티나(device-ratio: 2) 이상급 이미지를 원한다</li>\n<li>요즘 브라우저는 다 레티나 이상이므로, 보이는 크기의 2배 정도의 이미지 크기로 하자</li>\n</ul>\n<h4><strong>간격 당기기</strong> : Request 계단 간격 당기기</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42922453/56368921-588cfe00-6233-11e9-9fdc-41453f02c972.png\" alt=\"image\"></p>\n<ol>\n<li>서버로부터 HTML 문자열을 Stream으로 받음</li>\n<li><code class=\"language-text\">&lt;head&gt;</code> 태그에 포함된 자원을 병렬로 다운로드</li>\n<li><code class=\"language-text\">&lt;head&gt;</code> 태그에 포함된 자원을 모두 실행</li>\n<li><code class=\"language-text\">&lt;body&gt;</code> 태그부터 화면을 그리기 시작</li>\n<li>DOM 구성이 완료되면 DOMContentLoaded 이벤트 발생</li>\n<li>모든 자원의 로딩 완료되면 load 이벤트 발생</li>\n<li>Document Load : DOM 구성 완료 시점</li>\n<li>Window Load : 모든 자원의 로딩 완료 시점</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- A --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello world (1) <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>world1.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- B --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello world (2) <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>world2.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello world (3) <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>world3.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello world (4) <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>world4.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- C --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>A : <code class=\"language-text\">&lt;head&gt;</code>안의 모든 자원을 병렬로 로딩</li>\n<li>B : 자바스크립트나 CSS 파일 실행 시 렌더링이 block됨</li>\n<li>C : DOM은 다 그려졌으나, 이미지는 아직 로딩되지 않음</li>\n</ul>\n<p>Frontend 성능 격언</p>\n<ol>\n<li>head 태그에는 CSS와 필수 JS만 넣어라</li>\n<li>JS는 body 태그 마지막에 넣어라</li>\n<li>HTML 파일 중간중간에 JS를 넣지 마라</li>\n<li>async, defer 속성을 활용\n_ defer : DOM 제어와 관련이 있는 스크립트\n_ async : 의존성이 없는 스크립트</li>\n<li>CSS 파일에서 폰트, 이미지를 사용할 때, <strong>preload</strong>를 사용하면 CSS와 함께 로딩됨</li>\n<li>HTTP2 Server Push : HTML과 함께 JS, CSS, 이미지가 로딩됨</li>\n</ol>\n<h4>총체적으로 점검하기</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42922453/56369671-c128aa80-6234-11e9-8de1-44fe3a8cdd28.png\" alt=\"image\"></p>\n<ol>\n<li>체감 속도 높이기</li>\n<li>FP(First Paint) : HEAD 태그 종료 후</li>\n<li>FMP(First Meaningful Paint) : Hero 엘리먼트가 보이는 시기</li>\n<li>Hero 엘리먼트가 무엇인지, Lazy하게 처리하면 안되는 요소가 무엇인지 고려하기</li>\n<li>균형감 찾기</li>\n<li>각각의 Request를 균등한 크기로 만들기</li>\n<li>지나치게 큰 CSS나 JS가 없도록</li>\n</ol>","frontmatter":{"date":"2019-04-13","path":"/posts/naver-tech-concert-review-4","title":"[TECHCON] 오늘부터 나도 FE 성능분석가","category":"Seminar"}}},"pageContext":{}},"staticQueryHashes":["1516807325","2390655019","256249292","63159454"]}